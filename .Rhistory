setwd("C:/Users/sydlo/Desktop/R")
# read in data
finfo=read.csv("fishInfoIS.csv", stringsAsFactors = F)
fsamp=read.csv("fishSamplesIS.csv", stringsAsFactors = F)
fish=merge(fsamp, finfo, by="sampleID")
View(fish)
#create data frames for just our angling (gear=="AN") and shocking (gear=="BE") data.
fish[AN$,]
#create data frames for just our angling (gear=="AN") and shocking (gear=="BE") data.
fish[fish$gear, ]
#create data frames for just our angling (gear=="AN") and shocking (gear=="BE") data.
fish[fish$gear=AN,]
#create data frames for just our angling (gear=="AN") and shocking (gear=="BE") data.
fish[fish$gear="AN",]
#create data frames for just our angling (gear=="AN") and shocking (gear=="BE") data.
fish[fish$gear="AN", ]
#create data frames for just our angling (gear=="AN") and shocking (gear=="BE") data.
angling = fish[fish$gear == "AN" ]
#create data frames for just our angling (gear=="AN") and shocking (gear=="BE") data.
angling=fish[fish$gear == "AN" ]
#create data frames for just our angling (gear=="AN") and shocking (gear=="BE") data.
angling=fish[fish$gear=="AN" ]
#create data frames for just our angling (gear=="AN") and shocking (gear=="BE") data.
angling=fish[fish$gear=="AN", ]
shocking=fish[fish$gear=="BE", ]
#what is the largest fish caught by each of those gears? (What's the species, length, who caught it?  - check "crew" and "caughtBY" columns)
max(angling)
#what is the largest fish caught by each of those gears? (What's the species, length, who caught it?  - check "crew" and "caughtBY" columns)
max(angling, na.rm = T)
colnames(angling)
#what is the largest fish caught by each of those gears? (What's the species, length, who caught it?  - check "crew" and "caughtBY" columns)
max(angling$fishLenght, na.rm = T)
#what is the largest fish caught by each of those gears? (What's the species, length, who caught it?  - check "crew" and "caughtBY" columns)
max(angling$fishLength, na.rm = T)
max(shocking$fishLenght, na.rm = T)
max(shocking$fishLength, na.rm = T)
fish[fish$fishLength == max(angling$fishLength, na.rm = T), ]
fish[fish$fishLength == max(angling$fishLength, na.rm = T)&!(is.na(fish$fishlength)), ]
fish[fish$fishLength == max(angling$fishLength, na.rm = T)&!(is.na(fish$fishLength)), ]
large=fish[fish$fishLength == max(angling$fishLength, na.rm = T)&!(is.na(fish$fishLength)), ]
View(large)
View(large)
View(large)
large$caughtBy
large$crew
large$species
largeshock=fish[fish$fishLength == max(shocking$fishLength, na.rm=T)]
largeshock=fish[fish$fishLength == max(shocking$fishLength, na.rm = T)]
largeshock=fish[fish$fishLength == max(shocking$fishLength, na.rm = T), ]
largeshock$caughtBy
largeshock=fish[fish$fishLength == max(shocking$fishLength, na.rm = T)&!(is.na(fish$fishLength)), ]
largeshock$caughtBy
largeshock$crew
# how would you do this with just one column?
cMean=mean([,1])
# how would you do this with just one column?
cMean=mean(ex[,1])
#making up some data
ex=matrix(rnorm(1000, mean = 0, sd=10), ncol = 100, nrow=100)
# how would you do this with just one column?
cMean=mean(ex[,1])
# How many columns do we need to loop through?
# What do we need to do for each column?
# How will we store the mean value of each column?
cMean=numeric()
# Building a for loop
for(i in 1:ncol(ex)){temp=mean(ex[,i])cMean[i]=temp}
colnames(fish)  #looks like there is no convenient column called "lake ID code" which we could use to subset to just Brandy's data. But there is a column called "siteID" that has the lakeID info we want. Let's see if we can make a lakeID column using the infor in the sitID column.
head(fish$siteID)
# some useful functions strsplit()
strsplit(fish$siteID[1], split = "_")
# how do we create a new column?
fish$lakeID=character()
# how do we create a new column?
fish$lakeID=NA
View(fish)
# some useful functions strsplit()
strsplit(fish$siteID[1], split = "_")[[1]][1]
i=1
# now we can easily filter to just brandy's data using what we know about subsetting
for(i in 1:nrow(fish))[strsplit(fish$siteID[i], split = "_")[[1]][1]
# now we can easily filter to just brandy's data using what we know about subsetting
for(i in 1:nrow(fish)){[strsplit(fish$siteID[i], split = "_")[[1]][1]}
# now we can easily filter to just brandy's data using what we know about subsetting
for(i in 1:nrow(fish)){strsplit(fish$siteID[i], split = "_")[[1]][1]}
i=1
# how many columns and rows will it need?
unique(fish$caughtBY)
# how many columns and rows will it need?
unique(fish$caughtBy)
anglers=unique(fish$caughtBy)
anglers=anglers[c(1:10)]
anglers=anglers[c(1:10,13,15)]
anglers
# step 1 - create a data frame to store all these values with a row for each angler
sb=data.frame(angler=anglers, maxLMB=numeric(length(anglers)), meanLMB=numeric(length(anglers)), totalLMB=numeric(length(anglers)))
View(sb)
View(sb)
# what do we need to do for each angler? Try coding up what needs to be done for one angler first.
subsetMS=fish[fish$caughtBy=="MS"]
# what do we need to do for each angler? Try coding up what needs to be done for one angler first.
subsetMS=fish[fish$caughtBy=="MS",]
# what do we need to do for each angler? Try coding up what needs to be done for one angler first.
subsetMS=fish[fish$caughtBy=="MS", fish$species=="largemouthbass"]
View(subsetMS)
View(subsetMS)
# what do we need to do for each angler? Try coding up what needs to be done for one angler first.
subsetMS=fish[fish$caughtBy=="MS",]
# what do we need to do for each angler? Try coding up what needs to be done for one angler first.
subsetMS=fish[fish$caughtBy=="MS", ]
# what do we need to do for each angler? Try coding up what needs to be done for one angler first.
subsetMS=fish[fish$caughtBy=="MS"&fish$species=="largemouth_bass", ]
max(subsetMS$fishLength)
max(subsetMS$fishLength, na.rm=T
max(subsetMS$fishLength, na.rm=T)
max(subsetMS$fishLength, na.rm= T )
mean(subsetMS$fishLength, na.rm=T)
nrow(subsetMS)
for(i in 1:length(anglers)){
subsetMS=fish[fish$caughtBy[i]&fish$species=="largemouth_bass", ]
sb$maxLMB= max(subsetMS$fishLength, na.rm= T )
sb$meanLMB= mean(subsetMS$fishLength, na.rm=T)
sb$totalLMB= nrow(subsetMS)
}
for(i in 1:length(anglers)){
subsetMS=fish[anglers[i]&fish$species=="largemouth_bass", ]
sb$maxLMB= max(subsetMS$fishLength, na.rm= T )
sb$meanLMB= mean(subsetMS$fishLength, na.rm=T)
sb$totalLMB= nrow(subsetMS)
}
for(i in 1:length(anglers)){
subsetMS=anglers[anglers[i]&fish$species=="largemouth_bass", ]
sb$maxLMB= max(subsetMS$fishLength, na.rm= T )
sb$meanLMB= mean(subsetMS$fishLength, na.rm=T)
sb$totalLMB= nrow(subsetMS)
}
for(i in 1:length(anglers)){
subsetMS=fish[fish$caughtBy==anglers[i]&fish$species=="largemouth_bass", ]
sb$maxLMB= max(subsetMS$fishLength, na.rm= T )
sb$meanLMB= mean(subsetMS$fishLength, na.rm=T)
sb$totalLMB= nrow(subsetMS)
}
i=1
subsetMS=fish[fish$caughtBy==anglers[i]&fish$species=="largemouth_bass", ]
View(subsetMS)
for(i in 1:length(anglers)){
subsetMS=fish[fish$caughtBy==anglers[i]&fish$species=="largemouth_bass", ]
sb$maxLMB[i,]= max(subsetMS$fishLength, na.rm= T )
sb$meanLMB[i,]= mean(subsetMS$fishLength, na.rm=T)
sb$totalLMB[i,]= nrow(subsetMS)
}
for(i in 1:length(anglers)){
subsetMS=fish[fish$caughtBy==anglers[i]&fish$species=="largemouth_bass", ]
sb$maxLMB[i]= max(subsetMS$fishLength, na.rm= T )
sb$meanLMB[i]= mean(subsetMS$fishLength, na.rm=T)
sb$totalLMB[i]= nrow(subsetMS)
}
View(sb)
anglers=unique(fish$caughtBy)
anglers
anglers=anglers[c(1:10,13,15)]
anglers
# what do we need to do for each angler? Try coding up what needs to be done for one angler first.
subsetMS=fish[fish$caughtBy=="MS"&fish$species=="largemouth_bass", ]
# step 1 - create a data frame to store all these values with a row for each angler
sb=data.frame(angler=anglers, maxLMB=numeric(length(anglers)), meanLMB=numeric(length(anglers)), totalLMB=numeric(length(anglers)))
for(i in 1:length(anglers)){
subsetMS=fish[fish$caughtBy==anglers[i]&fish$species=="largemouth_bass", ]
sb$maxLMB[i,]= max(subsetMS$fishLength, na.rm= T )
sb$meanLMB[i,]= mean(subsetMS$fishLength, na.rm=T)
sb$totalLMB[i,]= nrow(subsetMS)
}
# step 1 - create a data frame to store all these values with a row for each angler
sb=data.frame(angler=anglers, maxLMB=numeric(length(anglers)), meanLMB=numeric(length(anglers)), totalLMB=numeric(length(anglers)))
for(i in 1:length(anglers)){
subsetMS=fish[fish$caughtBy==anglers[i]&fish$species=="largemouth_bass", ]
sb$maxLMB[i]= max(subsetMS$fishLength, na.rm= T )
sb$meanLMB[i]= mean(subsetMS$fishLength, na.rm=T)
sb$totalLMB[i]= nrow(subsetMS)
}
# step 1 - create a data frame to store all these values with a row for each angler
sb=data.frame(angler=anglers, maxLMB=numeric(length(anglers)), meanLMB=numeric(length(anglers)), totalLMB=numeric(length(anglers)))
i=1
subsetMS=fish[fish$caughtBy==anglers[i]&fish$species=="largemouth_bass", ]
nglers[i]
anglers[i]
sb$maxLMB[i]= max(subsetMS$fishLength, na.rm= T )
max(subsetMS$fishLength, na.rm= T )
sb$meanLMB[i]= mean(subsetMS$fishLength, na.rm=T)
sb$totalLMB[i]= nrow(subsetMS)
1:length(anglers)){
1:length(anglers)
for(i in 1:length(anglers)){
subsetMS=fish[fish$caughtBy==anglers[i]&fish$species=="largemouth_bass", ]
sb$maxLMB[i]= max(subsetMS$fishLength, na.rm= T )
sb$meanLMB[i]= mean(subsetMS$fishLength, na.rm=T)
sb$totalLMB[i]= nrow(subsetMS)
}
list.files()
ls()
getwd()
#Challenge part two
my_fun_function_2<-function(x){
minimum<-min(x)
half_min<-minimum/a
return(half_min)
}
my_fun_function_2(c(1,2,3,4,5,6,7,8,9,10))
a=4
my_fun_function_2(c(1,2,3,4,5,6,7,8,9,10))
a=3
my_fun_function_2(c(9,10,11))
my_fun_function_2<-function(x){
a=2
minimum<-min(x)
half_min<-minimum/a
return(half_min)
}
my_fun_function_2(c(9,10,11))
#Challenge part three
part3<-function(x){
b<-x+3
c<-x+4
d<-b+c
return(d)
}
part3(2)
c
b
d
b
setwd("~/Biocomp/Biocomp_exercise07")
#Exercise 7
iris<-read.csv(iris.csv)
#Exercise 7
iris<-read.csv(~/iris.csv)
#Exercise 7
iris<-read.csv("~/iris.csv")
#Exercise 7
iris<-read.csv("~/Biocomp/Biocomp_exercise07/iris.csv")
iris
species_count<-function(iris,){
num_obs<-iris[iris$Species=="x"]
return(num_obs)
}
species_count<-function(iris,x){
num_obs<-iris[iris$Species=="x"]
return(num_obs)
}
species_count(virginica)
species_count("virginica")
num_obs<-iris[iris$Species=="x",]
species_count("virginica")
return(i)
a<-1:5
i<-1
for (i in a){
return(i)
}
for (i in a){
a<-1:5
return(i)
}
i=1
i<-1
for (i in a){
a<-1:5
return(i)
}
a<-1:5
for (i in a){
return(i)
}
i=1
a<-1:5
for (i in a){
return(i)
}
i=1
}
for (i in 1:5){
print(i)
}
